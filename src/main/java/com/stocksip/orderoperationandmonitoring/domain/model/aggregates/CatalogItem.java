package com.stocksip.orderoperationandmonitoring.domain.model.aggregates;

import com.stocksip.orderoperationandmonitoring.domain.model.commands.CreateCatalogItemCommand;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Getter;

/**
 * @summary
 * Represents a catalog item in the order operation and monitoring system.
 * This entity is used to manage and track individual items available for purchase within a catalog.
 */

@Entity
@Getter
public class CatalogItem {
    /**
     * @type Long
     * Unique identifier for the catalog item.
     * This is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * @type String
     * Name of the catalog item.
     * This field is required and cannot be null.
     */
    private String name;

    /**
     * @type Long
     * Catalog identifier to which this item belongs.
     * This field is required and cannot be null.
     */
    private Long catalogId;

    /**
     * @type String
     * Brand of the catalog item.
     * This field is required and cannot be null.
     */
    private String brand;

    /**
     * @type String
     * Product type of the catalog item.
     * This field is required and cannot be null.
     */
    private String productType;

    /**
     * @type int
     * Content of the catalog item.
     * This field is required and cannot be null.
     */
    private int content;

    /**
     * Default constructor for JPA.
     * It is protected to prevent instantiation from outside the package.
     */
    protected CatalogItem() {}

    /**
     * Constructor to create a CatalogItem from a CreateCatalogItemCommand.
     *
     * @param command the command containing the details for creating the catalog item
     */
    public CatalogItem(CreateCatalogItemCommand command) {}

    /**
     * Updates the information of the catalog item.
     * This method allows updating the item's name, brand, product type, and content.
     *
     * @param name        the new name of the catalog item
     * @param brand       the new brand of the catalog item
     * @param productType the new product type of the catalog item
     * @param content     the new content of the catalog item
     */
    public CatalogItem updateInformation(String name, String brand, String productType, int content) {
        this.name = name;
        this.brand = brand;
        this.productType = productType;
        this.content = content;
        return this;
    }
}
